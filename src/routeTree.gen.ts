/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuestRouteRouteImport } from './routes/_guest/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as GuestIndexRouteImport } from './routes/_guest/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as GuestRegisterRouteImport } from './routes/_guest/register'
import { Route as AuthedDashboardRouteImport } from './routes/_authed/dashboard'
import { Route as AuthedSplitsIndexRouteImport } from './routes/_authed/splits.index'
import { Route as AuthedGoalsIndexRouteImport } from './routes/_authed/goals.index'
import { Route as AuthedBucketsIndexRouteImport } from './routes/_authed/buckets.index'
import { Route as AuthedSplitsIdIndexRouteImport } from './routes/_authed/splits.$id.index'
import { Route as AuthedGoalsIdIndexRouteImport } from './routes/_authed/goals.$id.index'
import { Route as AuthedBucketsIdIndexRouteImport } from './routes/_authed/buckets.$id.index'

const GuestRouteRoute = GuestRouteRouteImport.update({
  id: '/_guest',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestIndexRoute = GuestIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GuestRouteRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestRegisterRoute = GuestRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => GuestRouteRoute,
} as any)
const AuthedDashboardRoute = AuthedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedSplitsIndexRoute = AuthedSplitsIndexRouteImport.update({
  id: '/splits/',
  path: '/splits/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedGoalsIndexRoute = AuthedGoalsIndexRouteImport.update({
  id: '/goals/',
  path: '/goals/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedBucketsIndexRoute = AuthedBucketsIndexRouteImport.update({
  id: '/buckets/',
  path: '/buckets/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedSplitsIdIndexRoute = AuthedSplitsIdIndexRouteImport.update({
  id: '/splits/$id/',
  path: '/splits/$id/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedGoalsIdIndexRoute = AuthedGoalsIdIndexRouteImport.update({
  id: '/goals/$id/',
  path: '/goals/$id/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedBucketsIdIndexRoute = AuthedBucketsIdIndexRouteImport.update({
  id: '/buckets/$id/',
  path: '/buckets/$id/',
  getParentRoute: () => AuthedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof AuthedDashboardRoute
  '/register': typeof GuestRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof GuestIndexRoute
  '/buckets': typeof AuthedBucketsIndexRoute
  '/goals': typeof AuthedGoalsIndexRoute
  '/splits': typeof AuthedSplitsIndexRoute
  '/buckets/$id': typeof AuthedBucketsIdIndexRoute
  '/goals/$id': typeof AuthedGoalsIdIndexRoute
  '/splits/$id': typeof AuthedSplitsIdIndexRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof AuthedDashboardRoute
  '/register': typeof GuestRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof GuestIndexRoute
  '/buckets': typeof AuthedBucketsIndexRoute
  '/goals': typeof AuthedGoalsIndexRoute
  '/splits': typeof AuthedSplitsIndexRoute
  '/buckets/$id': typeof AuthedBucketsIdIndexRoute
  '/goals/$id': typeof AuthedGoalsIdIndexRoute
  '/splits/$id': typeof AuthedSplitsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/_guest': typeof GuestRouteRouteWithChildren
  '/_authed/dashboard': typeof AuthedDashboardRoute
  '/_guest/register': typeof GuestRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_guest/': typeof GuestIndexRoute
  '/_authed/buckets/': typeof AuthedBucketsIndexRoute
  '/_authed/goals/': typeof AuthedGoalsIndexRoute
  '/_authed/splits/': typeof AuthedSplitsIndexRoute
  '/_authed/buckets/$id/': typeof AuthedBucketsIdIndexRoute
  '/_authed/goals/$id/': typeof AuthedGoalsIdIndexRoute
  '/_authed/splits/$id/': typeof AuthedSplitsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/register'
    | '/demo/tanstack-query'
    | '/'
    | '/buckets'
    | '/goals'
    | '/splits'
    | '/buckets/$id'
    | '/goals/$id'
    | '/splits/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard'
    | '/register'
    | '/demo/tanstack-query'
    | '/'
    | '/buckets'
    | '/goals'
    | '/splits'
    | '/buckets/$id'
    | '/goals/$id'
    | '/splits/$id'
  id:
    | '__root__'
    | '/_authed'
    | '/_guest'
    | '/_authed/dashboard'
    | '/_guest/register'
    | '/demo/tanstack-query'
    | '/_guest/'
    | '/_authed/buckets/'
    | '/_authed/goals/'
    | '/_authed/splits/'
    | '/_authed/buckets/$id/'
    | '/_authed/goals/$id/'
    | '/_authed/splits/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  GuestRouteRoute: typeof GuestRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest/': {
      id: '/_guest/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof GuestIndexRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest/register': {
      id: '/_guest/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof GuestRegisterRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/splits/': {
      id: '/_authed/splits/'
      path: '/splits'
      fullPath: '/splits'
      preLoaderRoute: typeof AuthedSplitsIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/goals/': {
      id: '/_authed/goals/'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof AuthedGoalsIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/buckets/': {
      id: '/_authed/buckets/'
      path: '/buckets'
      fullPath: '/buckets'
      preLoaderRoute: typeof AuthedBucketsIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/splits/$id/': {
      id: '/_authed/splits/$id/'
      path: '/splits/$id'
      fullPath: '/splits/$id'
      preLoaderRoute: typeof AuthedSplitsIdIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/goals/$id/': {
      id: '/_authed/goals/$id/'
      path: '/goals/$id'
      fullPath: '/goals/$id'
      preLoaderRoute: typeof AuthedGoalsIdIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/buckets/$id/': {
      id: '/_authed/buckets/$id/'
      path: '/buckets/$id'
      fullPath: '/buckets/$id'
      preLoaderRoute: typeof AuthedBucketsIdIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedDashboardRoute: typeof AuthedDashboardRoute
  AuthedBucketsIndexRoute: typeof AuthedBucketsIndexRoute
  AuthedGoalsIndexRoute: typeof AuthedGoalsIndexRoute
  AuthedSplitsIndexRoute: typeof AuthedSplitsIndexRoute
  AuthedBucketsIdIndexRoute: typeof AuthedBucketsIdIndexRoute
  AuthedGoalsIdIndexRoute: typeof AuthedGoalsIdIndexRoute
  AuthedSplitsIdIndexRoute: typeof AuthedSplitsIdIndexRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedDashboardRoute: AuthedDashboardRoute,
  AuthedBucketsIndexRoute: AuthedBucketsIndexRoute,
  AuthedGoalsIndexRoute: AuthedGoalsIndexRoute,
  AuthedSplitsIndexRoute: AuthedSplitsIndexRoute,
  AuthedBucketsIdIndexRoute: AuthedBucketsIdIndexRoute,
  AuthedGoalsIdIndexRoute: AuthedGoalsIdIndexRoute,
  AuthedSplitsIdIndexRoute: AuthedSplitsIdIndexRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface GuestRouteRouteChildren {
  GuestRegisterRoute: typeof GuestRegisterRoute
  GuestIndexRoute: typeof GuestIndexRoute
}

const GuestRouteRouteChildren: GuestRouteRouteChildren = {
  GuestRegisterRoute: GuestRegisterRoute,
  GuestIndexRoute: GuestIndexRoute,
}

const GuestRouteRouteWithChildren = GuestRouteRoute._addFileChildren(
  GuestRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  GuestRouteRoute: GuestRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
